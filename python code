import json
from typing import Dict, List, Optional, Any
class RestAPI:

    def __init__(self, database: Optional[Dict[str, List]] = None):
        self.database = database or {"users": []}
        self._name2user = {u["name"]: u for u in self.database["users"]}
    def get(self, url, payload=None) -> str:
        if payload is None:
            return json.dumps({"users": self.database["users"]})

        d = json.loads(payload)

        if url == "/users":
            users = set(d["users"])
            result = list(filter(lambda u: u["name"] in users, self.database["users"]))
            return json.dumps({"users": result})
        return json.dumps({"users": []})
    def post(self, url, payload: Optional[str] = None) -> str:
        if payload is None:
            return "{}"
        d = json.loads(payload)
        if url == "/add":
            return json.dumps(self._add_user(d))
        elif url == "/iou":
            return json.dumps(self._new_iou(d))
        else:
            return "{}"
    def _add_user(self, new_info: Dict[str, Any]) -> Dict[str, Any]:
        name = new_info["user"]
        assert not any([name == user["user"] for user in self.database["users"]])
        new_user = {"name": name, "owes": {}, "owed_by": {}, "balance": 0}
        self.database["users"].append(new_user)
        self._name2user[name] = new_user
        return new_user
    def _new_iou(self, info: Dict[str, Any]) -> Dict[str, Any]:
        lender = self._name2user[info["lender"]]
        borrower = self._name2user[info["borrower"]]
        amount = info["amount"]
        # initialize "account" if not there
        if borrower["name"] not in lender["owed_by"]:
            lender["owed_by"][borrower["name"]] = 0
            borrower["owes"][lender["name"]] = 0
        # update balances
        lender["owed_by"][borrower["name"]] += amount
        borrower["owes"][lender["name"]] += amount
        lender["balance"] += amount
        borrower["balance"] -= amount
        # reduce
        def reduce_inplace(u: Dict, n: str) -> None:
            if n in u['owes'] and n in u['owed_by']:
                if u['owes'][n] > u['owed_by'][n]:
                    u['owes'][n] -= u['owed_by'][n]
                    u['owed_by'].pop(n)
                elif u['owed_by'][n] > u['owes'][n]:
                    u['owed_by'][n] -= u['owes'][n]
                    u['owes'].pop(n)
                else:  # u['owes'][n] == u['owed_by'][n]:
                    u['owes'].pop(n)
                    u['owed_by'].pop(n)
        reduce_inplace(lender, borrower['name'])
        reduce_inplace(borrower, lender['name'])
        return {"users": sorted([lender, borrower], key=lambda u: u["name"])}
		
